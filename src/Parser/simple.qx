// http://unicode.org/reports/tr31

define {
	All          [:inverse([]):]
	Newline      [:\P{Bidi_Class=Paragraph_Separator}:]
	Whitespace   [:difference(\P{White_Space}, \P{Bidi_Class=Paragraph_Separator}):]
	Identifier   [:\P{XID_Start}:][:\P{XID_Continue}:]*
	PatternSpace [:\P{Pattern_White_Space}:]
	Syntax       [:\P{Pattern_Syntax}:]
	Ignorable    [:\P{Default_Ignorable_Code_Point}:]
	Number       [0-9]+
	Assignment   "≔"
	Closure      "↦"
	QuoteOpen    "“"
	QuoteClose   "”"
	BracketOpen  "("
	BracketClose ")"
}

token {
	Identifier;
	Quotation;
	Assignment;
	Closure;
	EndOfStatement;
	BlockBegin;
	BlockEnd;
	BracketOpen;
	BracketClose;
	FAILURE;
}

body {
	int quote_depth;
}

start = Program;

mode Program: <indentation: "\t" => space 1; {Newline} => newline;> {
	// Indentation tabs, newlines and other whitespace
	on_indent        => TokenBlockBegin;
	on_dedent        => TokenBlockEnd;
	on_nodent        => TokenEndOfStatement;
	{Whitespace}     { }
	
	// Syntax
	{QuoteOpen}      => GOSUB(Quotation);
	{Assignment}     => TokenAssignment;
	{Closure}        => TokenClosure;
	{Identifier}     => TokenIdentifier(Lexeme);
	{Number}         => TokenIdentifier(Lexeme);
	{BracketOpen}    => TokenBracketOpen;
	{BracketClose}   => TokenBracketClose;
	{Syntax}         => TokenIdentifier(Lexeme);
	
	// Error handling
	on_indentation_error => TokenFAILURE(Lexeme);
	on_indentation_bad   => TokenFAILURE(Lexeme);
	on_failure           => TokenFAILURE(Lexeme);
}

// Read a quotation, which may be nested
mode Quotation {
	// Accumulate a string
	on_entry { self.quote_depth = 1; self_accumulator_clear(); }
	on_exit { self_accumulator_flush(TokenQuotation); }
	
	// Keep track of nesting depth
	{QuoteOpen} { ++self.quote_depth; self_accumulator_add(LexemeBegin, LexemeEnd);}
	{QuoteClose} {
		if(--self.quote_depth == 0) self.pop_mode();
		else self_accumulator_add(LexemeBegin, LexemeEnd);
	}
	
	// Eat all other characters
	[:inverse({QuoteOpen},{QuoteClose}):]+ { self_accumulator_add(LexemeBegin, LexemeEnd); }
	
	// Error handling
	on_failure           => TokenFAILURE(Lexeme);
}
