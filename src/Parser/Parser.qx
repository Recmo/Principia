// http://unicode.org/reports/tr31

define {
	
	// Unicode
	All          [:inverse([]):]
	Newline      [:\P{Bidi_Class=Paragraph_Separator}:]
	Whitespace   [:difference(\P{White_Space}, \P{Bidi_Class=Paragraph_Separator}):]
	Identifier   [:\P{XID_Start}:][:\P{XID_Continue}:]*
	PatternSpace [:\P{Pattern_White_Space}:]
	Syntax       [:\P{Pattern_Syntax}:]
	Ignorable    [:\P{Default_Ignorable_Code_Point}:]
	
	// Numbers
	Digit        [0-9A-Z]
	Decimal      [0123456789]
	Subscript    [₀₁₂₃₄₅₆₇₈₉]
	Superscript  [⁰¹²³⁴⁵⁶⁷⁸⁹]
	SupSign      [⁻⁺]
	Separator    \N{THIN SPACE}
	RadixPoint   "."
	SepDigit     [:union({Digit},{Separator}):]
	Number       {Digit}{SepDigit}*({RadixPoint}{SepDigit}*)?({Subscript}+({SupSign}?{Superscript}+)?)?
	
	Call         "≔"
	Closure      "↦"
	
	Because      "∵"
	Axiom        "⊨"
	Proofs       "⊢"
	Therefore    "∴"
	
	QuoteOpen    "“"
	QuoteClose   "”"
	BracketOpen  "("
	BracketClose ")"
	BracketValue "·"
}

token {
	Identifier;
	Quotation;
	Number;
	Call;
	Closure;
	Because;
	Axiom;
	Proofs;
	Therefore;
	StatementSeparator;
	BlockBegin;
	BlockEnd;
	BracketOpen;
	BracketClose;
	BracketValue;
	Failure;
	EndOfStream;
}

body {
	int quote_depth;
}

start = Program;

mode Program: <indentation: "\t" => space 1; {Newline} => newline;>
{
	// Indentation tabs, newlines and other whitespace
	on_indent        => TokenBlockBegin;
	on_dedent        => TokenBlockEnd;
	on_nodent        => TokenStatementSeparator;
	{Whitespace}     { }
	
	// Syntax
	{Call}           => TokenCall;
	{Closure}        => TokenClosure;
	{Because}        => TokenBecause;
	{Axiom}          => TokenAxiom;
	{Proofs}         => TokenProofs;
	{Therefore}      => TokenTherefore;
	{BracketOpen}    => TokenBracketOpen;
	{BracketClose}   => TokenBracketClose;
	{BracketValue}   => TokenBracketValue;
	{Identifier}     => TokenIdentifier(Lexeme);
	{Number}         => TokenNumber(Lexeme);
	{QuoteOpen}      => GOSUB(Quotation);
	{QuoteClose}     => TokenFailure(Lexeme);
	{Syntax}         => TokenIdentifier(Lexeme);
	
	// Error handling
	on_indentation_error => TokenFailure(Lexeme);
	on_indentation_bad   => TokenFailure(Lexeme);
	on_failure           => TokenFailure(Lexeme);
	on_end_of_stream     => TokenEndOfStream;
}

// Read a quotation, which may be nested
mode Quotation
{
	// Accumulate a string
	on_entry {
		self.quote_depth = 1;
		self_accumulator_clear();
	}
	on_exit {
		self_accumulator_flush(TokenQuotation);
	}
	
	// Keep track of nesting depth
	{QuoteOpen} { ++self.quote_depth; self_accumulator_add(LexemeBegin, LexemeEnd);}
	{QuoteClose} {
		if(--self.quote_depth == 0) self.pop_mode();
		else self_accumulator_add(LexemeBegin, LexemeEnd);
	}
	
	// Eat all other characters
	[:inverse({QuoteOpen},{QuoteClose}):]+ {
		self_accumulator_add(Lexeme, LexemeEnd);
	}
	
	// Error handling
	on_failure           => TokenFailure(Lexeme);
}
