fact n ↦ r
	base ↦ 1
	p ≔ sub n 1
	fp ≔ fact p
	fn ≔ mul fp n
	recurse ↦ fn
	case ≔ if n recurse base
	r ≔ case
	
f20 ≔ fact 20
f20

Péter-Robison-Ackermann:

PRA m n:
	m = 0 ⇒ n + 1
	m > 0 ⇒
		n = 0 ⇒ PRA (m - 1) 1
		n > 0 ⇒ PRA (m - 1) (PRA m (n - 1))

Implementation:

PRA m n ↦ r
	pm ≔ sub m 1
	pn ≔ sub n 1
	nn ≔ add n 1
	PRA_m_pn ≔ PRA m pn
	PRA_pm ≔ PRA pm 1
	PRA_mn ≔ PRA pm PRA_m_pn
	f_PRA_pm ↦ PRA_pm
	f_PRA_mn ↦ PRA_mn
	if_n ≔ if n f_PRA_mn f_PRA_pm
	f_nn ↦ nn
	if_m ≔ if m if_n f_nn
	r ≔ if_m

p22 ≔ PRA 2 2
p22

p36 ≔ PRA 3 6
p36


Currying:

bind5 f ↦ boundf
boundf x ↦ f5x
f5x ≔ f 5 x

g gx gy ↦ gxy
gxy ≔ mul gx gy

mul5 ≔ bind5 g

test6 ≔ mul5 6
test6



Differentiate function:

diff f ε ↦ (df x ↦ (f(x + δ) - f(x)) / δ)

1. ≔ itof 1
1000. ≔ itof 1000

x' ≔ addf x δ
fx' ≔ f x'
fx ≔ f x
Δf ≔ subf fx' fx
dfx ≔ divf Δf δ
df x ↦ dfx
diff f δ ↦ df

sqr s ↦ ss
ss ≔ mulf s s

ε ≔ divf 1. 1000.
dsqr ≔ diff sqr ε

dsqr1000 ≔ dsqr 1000.
dsqr1000n ≔ ftoi dsqr1000
dsqr1000n

