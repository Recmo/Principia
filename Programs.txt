fact n ↦ r
	base ↦ 1
	p ≔ sub n 1
	fp ≔ fact p
	fn ≔ mul fp n
	recurse ↦ fn
	case ≔ if n recurse base
	r ≔ case
	
f20 ≔ fact 20
f20

Péter-Robison-Ackermann:

PRA m n:
	m = 0 ⇒ n + 1
	m > 0 ⇒
		n = 0 ⇒ PRA (m - 1) 1
		n > 0 ⇒ PRA (m - 1) (PRA m (n - 1))

Implementation:

PRA m n ↦ r
	pm ≔ sub m 1
	pn ≔ sub n 1
	nn ≔ add n 1
	PRA_m_pn ≔ PRA m pn
	PRA_pm ≔ PRA pm 1
	PRA_mn ≔ PRA pm PRA_m_pn
	f_PRA_pm ↦ PRA_pm
	f_PRA_mn ↦ PRA_mn
	if_n ≔ if n f_PRA_mn f_PRA_pm
	f_nn ↦ nn
	if_m ≔ if m if_n f_nn
	r ≔ if_m

p22 ≔ PRA 2 2
p22

p36 ≔ PRA 3 6
p36


Mutual recursion:

even? en ↦ even?en
	true ↦ 1
	ask_odd ↦ odd?pen
		pen ≔ sub en 1
		odd?pen ≔ odd? pen
	even?enf ≔ if en ask_odd true
	even?en ≔ even?enf

odd? on ↦ odd?on
	false ↦ 0
	ask_even ↦ even?pon
		pon ≔ sub on 1
		even?pon ≔ even? pon
	odd?onf ≔ if on ask_even false
	odd?on ≔ odd?onf

e123 ≔ even? 123
e123


Eulicd's algorithm for Extended Greatest Common Divisor:

Euclid a b ↦ gcd x y
	d r ≔ div a b
	base ↦ b 0 1
	recurse ↦ gcd' y' x"
		gcd' x' y' ≔ Euclid b r
		y" ≔ mul y' d
		x" ≔ sub x' y"
	next ≔ if r recurse base
	gcd x y ≔ next

g p q ≔ Euclid 123 321
g
p
q



Currying:

bind5 f ↦ boundf
boundf x ↦ f5x
f5x ≔ f 5 x

g gx gy ↦ gxy
gxy ≔ mul gx gy

mul5 ≔ bind5 g

test6 ≔ mul5 6
test6


Complex number structure:

ℂ ℂ_xℜ ℂ_xℑ ↦ ℂ_z
	ℂ_z ↦ ℂ_xℜ ℂ_xℑ

ℜ ℜ_z ↦ ℜ_zℜ
	ℜ_zℜ ℜ_zℑ ≔ ℜ_z

ℑ ℑ_z ↦ ℑ_zℑ
	ℑ_zℜ ℑ_zℑ ≔ ℑ_z

ℂ+ ℂ+_a ℂ+_b ↦ ℂ+_r
	ℂ+_aℜ ℂ+_aℑ ≔ ℂ+_a
	ℂ+_bℜ ℂ+_bℑ ≔ ℂ+_b
	ℂ+_rℜ ≔ addr ℂ+_aℜ ℂ+_bℜ
	ℂ+_rℑ ≔ addr ℂ+_aℑ ℂ+_bℑ
	ℂ+_r ↦ ℂ+_rℜ ℂ+_rℑ

ℂ× ℂ×_a ℂ×_b ↦ ℂ×_r
	ℂ×_aℜ ℂ×_aℑ ≔ ℂ×_a
	ℂ×_bℜ ℂ×_bℑ ≔ ℂ×_b
	ℂ×_rℜ1 ≔ mulr ℂ×_aℜ ℂ×_bℜ
	ℂ×_rℜ2 ≔ mulr ℂ×_aℑ ℂ×_bℑ
	ℂ×_rℜ ≔ subr ℂ×_rℜ1 ℂ×_rℜ2
	ℂ×_rℑ1 ≔ mulr ℂ×_aℜ ℂ×_bℑ
	ℂ×_rℑ2 ≔ mulr ℂ×_aℑ ℂ×_bℜ
	ℂ×_rℑ ≔ addr ℂ×_rℑ1 ℂ×_rℑ2
	ℂ×_r ↦ ℂ×_rℜ ℂ×_rℑ

ℂ/ ℂ/_a ℂ/_b ↦ ℂ/_r
	ℂ/_aℜ ℂ/_aℑ ≔ ℂ/_a
	ℂ/_rℜ ≔ divr ℂ/_aℜ ℂ/_b
	ℂ/_rℑ ≔ divr ℂ/_aℑ ℂ/_b
	ℂ/_r ↦ ℂ/_rℜ ℂ/_rℑ

 0.  ≔ real 0
 1.  ≔ real 1
 2.  ≔ real 2
 6.  ≔ real 6
10.  ≔ real 10
 0.1 ≔ divr 1. 10.
 1c  ≔ ℂ 1. 0.

Exp cez ↦ cer
	cer1 ≔ ℂ+ 1c cez
	cez2 ≔ ℂ× cez cez
	cet2 ≔ ℂ/ cez2 2.
	cer2 ≔ ℂ+ cer1 cet2
	cez3 ≔ ℂ× cez2 cez
	cet3 ≔ ℂ/ cez3 6.
	cer ≔ ℂ+ cer2 cet3

w ≔ ℂ 0.1 0.1
z ≔ Exp w

ℜz ≔ ℜ z
ℑz ≔ ℑ z
ℜz
ℑz


Lisp style linked lists:

cons a b ↦ pair
	pair ↦ a b

car pair ↦ a
	a b ≔ pair

cdr pair ↦ b
	a b ≔ pair

nil ↦




Numerically Differentiate function:

diff f ε ↦ (df x ↦ (f(x + δ) - f(x)) / δ)


diff f δ ↦ df
	df x ↦ dfx
		x' ≔ addr x δ
		fx' ≔ f x'
		fx ≔ f x
		Δf ≔ subr fx' fx
		dfx ≔ divr Δf δ

sqr s ↦ ss
	ss ≔ mulr s s

dsqr ≔ diff sqr 0.001



dsqr10 ≔ dsqr 10.
dsqr10

