title “The answer to Scott”
author “Remco Bloemen”
date “2016-07-01”
description “
	
	This file implements Scott numerals and decimal printing using
	only a “print” function that takes a single string constant:
	
		λ print value ret
	
	Other than this, the file is entirely self-contained.
	
	The function “main” will compute 7 × 6 and print the result in
	decimal along with a whimsical quote.
	
”

section “Print helpers”

λ print-newline ret
print “
” ret

λ print-line arg ret
	print arg (λ · nil)
	print-newline ret nil

section “Scott numerals”

λ Z   (· (λ · (·) _    ))
λ S n (· (λ ·  _ (· n) ))

λ if_zero n then else
	n then else

λ if_equal m n then else
	m m_zero m_nonzero
	λ m_zero nil
		if_zero n then else nil
	λ m_nonzero m' nil
		n else recurse nil
		λ recurse n'
			if_equal m' n' then else

λ add m n ret
	m m_zero m_nonzero
	λ m_zero nil
		ret n nil
	λ m_nonzero m' nil
		S n recurse nil
		λ recurse n'
			add m' n' ret

λ sub m n ret fail
	n n_zero n_nonzero
	λ n_zero nil
		ret m nil
	λ n_nonzero n' nil
		m fail recurse nil
		λ recurse m'
			sub m' n' ret fail

λ mul m n ret
	m m_zero m_nonzero
	λ m_zero nil
		Z ret nil
	λ m_nonzero m'
		mul m' n (λ · r)
		add r n ret

λ div m n ret
	todo “Fix infinite recursion when n is zero”
	sub m n recurse done
	λ done nil
		Z (λ · n0) nil
			ret n0 m
	λ recurse m'
		div m' n (λ · q r)
		S q (λ · q')
		ret q' r

section “Decimal output”

λ decimals ret
	Z    (λ · n0) ret
	S n0 (λ · n1)
	S n1 (λ · n2)
	S n2 (λ · n3)
	S n3 (λ · n4)
	S n4 (λ · n5)
	S n5 (λ · n6)
	S n6 (λ · n7)
	S n7 (λ · n8)
	S n8 (λ · n9)
	S n9 (λ · n10)
	ret n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10

λ print-decimal n ret fail
	decimals (λ · n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10) n
	if_equal n n0 (λ · (print “0” ret ·)) (λ · nil0)
	if_equal n n1 (λ · (print “1” ret ·)) (λ · nil1) nil0
	if_equal n n2 (λ · (print “2” ret ·)) (λ · nil2) nil1
	if_equal n n3 (λ · (print “3” ret ·)) (λ · nil3) nil2
	if_equal n n4 (λ · (print “4” ret ·)) (λ · nil4) nil3
	if_equal n n5 (λ · (print “5” ret ·)) (λ · nil5) nil4
	if_equal n n6 (λ · (print “6” ret ·)) (λ · nil6) nil5
	if_equal n n7 (λ · (print “7” ret ·)) (λ · nil7) nil6
	if_equal n n8 (λ · (print “8” ret ·)) (λ · nil8) nil7
	if_equal n n9 (λ · (print “9” ret ·)) (λ · nil9) nil8
	fail nil9

λ print-number n ret
	decimals (λ · n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10) ret
	div n n10 (λ · q r)
	if_zero q done recurse
	λ recurse nil
		print-number q done nil
	λ done nil
		print-decimal r ret nil


section “Main”

λ main exit
	print “The answer to the universe, life and everything is: ” (λ · nil) exit
	decimals (λ · n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10) nil
	mul n7 n6 (λ · r)
	print-number r (λ · nil)
	print-newline exit nil
