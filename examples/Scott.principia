title ↦ “Mogensen-Scott encoding”

c↦“
http://www.berniepope.id.au/docs/scott_encoding.txt

C₁ x₁ x₂ ↦ (c₁ c₂ ↦ (≔ c₁ x₁ x₂))
C₂ ↦ (c₁ c₂ ↦ (≔ c₂))
…
”

section ↦ “Scott booleans”

True ↦ (t f ↦ (≔ t))
False ↦ (t f ↦ (≔ f))

true ≔ True
false ≔ False

sif condition then else ↦ (≔ condition then else)

section ↦ “Boolean based logic”


section ↦ “Maybe types”

Nothing ↦ (n j ↦ (≔ n))
Just a ↦ (n j ↦ (≔ j a))

section ↦ “Scott numerals”

Z ↦ (z s ↦ (≔ z))
S x ↦ (z s ↦ (≔ s x))

c0 ≔ Z
c1 ≔ S c0
c2 ≔ S c1

succ x ↦ (≔ S x)
is_zero x ↦ (≔ x (↦ true) (y ↦ false))


section ↦ “Successor based arithmetic”


sadd x y ↦ (≔ x (↦ y) (px ↦ (≔ sadd px (≔ S y))))
ssub x y ↦ (≔ x Z (px ↦ (≔ y (↦ x) (py ↦ (≔ ssub px py)))))
smul x y ↦ (≔ x Z (px ↦ (≔ y Z (py ↦ (≔ sadd (≔ smul px py) (≔ sadd px y))))))

fact n ↦ (≔ n (↦ c1) (pn ↦ (≔ smul n (≔ fact pn))))

scott n ↦ (≔(≔ if n (↦ (≔ S (≔ scott (≔ sub n 1)))) Z ))
unscott n ↦ (≔ n (↦ 0) (pn ↦ (≔ add 1 (≔ unscott pn)) ))

test_coding a ↦ (≔ unscott (≔ scott a))
test_add a b ↦ (≔ unscott (≔ sadd (≔ scott a) (≔ scott b)))
test_sub a b ↦ (≔ unscott (≔ ssub (≔ scott a) (≔ scott b)))
test_mul a b ↦ (≔ unscott (≔ smul (≔ scott a) (≔ scott b)))
test_fact a ↦ (≔ unscott (≔ fact (≔ scott a)))


