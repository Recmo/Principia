
title ↦ “Mogensen-Scott encoding”

c↦“
http://www.berniepope.id.au/docs/scott_encoding.txt

C₁ x₁ x₂ ↦ (c₁ c₂ ↦ (≔ c₁ x₁ x₂))
C₂ ↦ (c₁ c₂ ↦ (≔ c₂))
…

c₂ ≔ C₂
”

section ↦ “Scott booleans”

True ↦ (t f ↦ (≔ t))
False ↦ (t f ↦ (≔ f))

true ≔ True
false ≔ False

not b ↦ (≔ b (↦ false) (↦ true))
and a b ↦ (≔ a (↦ b) (↦ false))
or a b ↦ (≔ a (↦ true) (↦ b))
sif condition then else ↦ (≔ condition then else)

section ↦ “Scott optionals”

Nothing ↦ (n j ↦ (≔ n))
Just a ↦ (n j ↦ (≔ j a))

nothing ≔ Nothing

section ↦ “Scott numerals”

Z ↦ (z s ↦ (≔ z))
S x ↦ (z s ↦ (≔ s x))

c0 ≔ Z
c1 ≔ S c0
c2 ≔ S c1

succ x ↦ (≔ S x)
is_zero x ↦ (≔ x (↦ true) (y ↦ false))

sadd x y ↦ (≔ x (↦ y) (px ↦ (≔ sadd px (≔ S y))))
ssub x y ↦ (≔ x Z (px ↦ (≔ y (↦ x) (py ↦ (≔ ssub px py)))))
smul x y ↦ (≔ x Z (px ↦ (≔ y Z (py ↦ (≔ sadd (≔ smul px py) (≔ sadd px y))))))

fact n ↦ (≔ n (↦ c1) (pn ↦ (≔ smul n (≔ fact pn))))

equals x y ↦ (≔ x (↦(≔ y (↦ true) (yp ↦ false))) (xp ↦(≔ y (↦ false) (yp ↦ (≔ equals xp yp)))))

section ↦ “Scott numeral / native numeral converstion”

scott n ↦ (≔(≔ if n (↦ (≔ S (≔ scott (≔ sub n 1)))) Z ))
unscott n ↦ (≔ n (↦ 0) (pn ↦ (≔ add 1 (≔ unscott pn)) ))

test_coding a ↦ (≔ unscott (≔ scott a))
test_add a b ↦ (≔ unscott (≔ sadd (≔ scott a) (≔ scott b)))
test_sub a b ↦ (≔ unscott (≔ ssub (≔ scott a) (≔ scott b)))
test_mul a b ↦ (≔ unscott (≔ smul (≔ scott a) (≔ scott b)))
test_fact a ↦ (≔ unscott (≔ fact (≔ scott a)))


section ↦ “Scott pairs”

Pair f s ↦ (p ↦ (≔ p f s))

fst p ↦ (≔ p (f s ↦ f))
snd p ↦ (≔ p (f s ↦ s))
swap p ↦ (≔ p (f s ↦ Pair s f))

unpair p ↦ f s
	f s ≔ p (f s ↦ f s)

section ↦ “Scott lists”

Nil ↦ (n c ↦ (≔ n))
Cons h t ↦ (n c ↦ (≔ c h t))

nil ≔ Nil

repeat x count ↦ (≔ count (↦ nil) (countp ↦ (≔ Cons x (≔ repeat x countp))))
length l ↦ (≔ l (↦ c0) (head tail ↦ (≔ succ (≔ length tail))))
append l1 l2 ↦ (≔ l1 (↦ l2) (head tail ↦ (≔ Cons head (≔ append tail l2))))
head default list ↦ (≔ list (↦ default) (head tail ↦ head))
tail list ↦ (≔ list (↦ nil) (head tail ↦ tail))
reverse list ↦ (≔ list (↦ nil) (head tail ↦ (≔ append (≔ reverse tail) (≔ Cons head nil))))

filter test list ↦ (≔ list (↦ nil) (head tail ↦ (≔ (≔ test head) (↦ (≔ Cons head recurse)) (↦ recurse))))
	recurse ≔ filter test tail
map f list ↦ (≔ list (↦ nil) (head tail ↦ (≔ Cons (≔ f head) tail)))
fold f list base ↦ (≔ list (↦ base) (head tail ↦ (≔ f head (≔ fold f tail base))))
sort compare list ↦ (≔ list (↦ nil) (head tail ↦ recurse))
	recurse ≔ append lesser (≔ append (≔ Cons head nil) greater)
	lesser ≔ sort compare (≔ filter (x ↦ (≔ compare x head)) tail)
	greater ≔ sort compare (≔ filter (x ↦ (≔ compare head x)) tail)

append2 l1 l2 ↦ (≔ fold Cons l1 l2)


filter2 test list ↦ (≔ fold (head acc ↦ (≔ if (≔test head) (≔ Cons head acc) acc)) list nil)

doc ↦ “http://en.literateprograms.org/Quicksort_%28Haskell%29”

section ↦ “Morgen-Scott Meta Object Protocol”

